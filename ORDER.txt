Order in which to read files :-

1)  Inside Package owlapi -> app.java
    Order in which to read functions :-
        1) - generate
        2) - generateOntology
        3) - loadMainNecessaryThings

2) Inside Package owlapi.Features.BoilerplateCode -> Util.java
    Order in which to read functions :-
        1) - initializeGlobalHashMaps
        2) - initialUserInputCount
        3) - initialAxiomsCount
        4) - randomizeMapping
        IGNORE - readUserInputFile

3) Inside Package owlapi.Features.BoilerplateCode -> TextFileProcessor.java
    Order in which to read functions :-
        1) - readTxtFile
        2) - rankAxioms
        3) - loadGlobalCommons
        4) - saveGlobalCommons
        5) - insertIntoGlobalCommons
        IGNORE insertIntoGlobalHashMaps for NOW.

4) Inside Package owlapi.Features.BoilerplateCode -> CommonFramework.java
    Order in which to read functions :-
        1) - addToOntology
        2) - insertAxiomIntoOntology
        IGNORE - filterGlobalHashMapConcepts

NOTE :- 
	 * CommonFramework.java's "addToOntology" function corresponds to TextFileProcessor.java's "insertIntoGlobalCommons". They are functioning similar.
	 * CommonFramework.java's "insertAxiomIntoOntology" function corresponds to TextFileProcessor.java's "insertIntoGlobalHashMaps". They are functioning similar.

( A Bit To Difficult One To Understand, but if you are CLEAR till above, it could be easily understood with a of bit efforts. )
5) Inside Package owlapi.Features.BoilerplateCode -> LastDance.java
    Order in which to read functions :-
        1) - oneLastTime
        2) - constructAxiomsHashMap
        3) - addGlobalToOntologyDomainRange
        4) - addGlobalToOntologySubOf ( especially ONLY this function )

6) - FilenameConstructMapping.java -> No need to go into details. Just skim it. What we are basically doing here, 
For each category of constructs, we have defined its corresponding axiom 'txt' file and 'separator' used to PARSE the Axioms.
Because ALL Axioms 'txt' file is IN FORMAT :-
Term1 'SEPARATOR' Terms......... ( Could be from emty to 5 terms ).
There we are making these two Hashmaps
    1) - fileMap ( key - constructName ( without Owl/Feature Term in them) , value - fileName to read axioms from )
    2) - separatorMap ( key - constructName ( without Owl/Feature Term in them) , value - 'SEPARATOR' to parse the axiom in their 'txt' file )

7) - Reasoner.java -> This File Just Has Ma'am's Reasoning Logic Copy/Pasted , NO NEED To Read This File.

8) - owlapi.Features.Features -> This is the PACKAGE NAME, under which we have written Category JAVA Files. 
For example :- ClassEnumerationcategory.java, ClassExpressionAxiomsCategory.java, DataRangesCategory.java like 8 files. "AssertionCategory.java" file IS NOT currently being used.
List of constructs UNDER EACH category java file is mentioned below. 
In each method, we have written logic TO INSERT that CONSTRUCT into ONTOLOGY. In each method , we are taking ArrayList Of Terms ( Part Of Single Axiom ) As Argument.

ClassEnumerationcategory = {"OwlClass","ObjectComplement","ObjectIntersection","ObjectOneOf","ObjectUnionOf"};
ClassExpressionAxiomsCategory = {"AllDisjointClasses","DisjointUnion","DisjointWith","EquivalentClass","RdfsSubClassOf"};
ObjectPropertyAxiomCategory = {"AsymmetricProperty","EquivalentObjectProperty","FunctionalObjectProperty","InverseFunctionalProperty","InverseOfProperty","IrreflexiveProperty","ObjectPropertyDisjointWith","ReflexiveProperty","SymmetricProperty","TransitiveProperty","RdfsObjectDomain","RdfsObjectRange","PropertyChainAxiom","RdfsObjectSubPropertyOf","AllDisjointObjectProperties","ObjectProperty"}; 
ObjectPropertyRestrictinoCategory = {"ObjectAllValuesFrom","ObjectHasSelf","ObjectHasValue","ObjectSomeValuesFrom","ObjectQualifiedCardinality","ObjectMaxQualifiedCardinality","ObjectMinQualifiedCardinality"};
DataPropertyAxiomsCategory = {"AllDisjointDataProperties","EquivalentDataProperty","FunctionalDataProperty","DataPropertyDisjointWith","RdfsDataDomain","RdfsDataRange","RdfsDataSubPropertyOf"}; 
DataPropertyRestrictionCategory = {"DataAllValues","DataHasValue", "DataMaxQualifiedCardinality","DataMinQualifiedCardinality","DataQualifiedCardinality","DataSomeValuesFrom"};
DataRangesCategory = {"DataComplementOf","DataIntersectionOf", "DataOneOf","DataUnionOf"};