/** 
 * ABox axioms are generated by OWL2Bench based on three user inputs, 
 * the number of universities, the OWL 2 profile (EL, QL, RL, DL) of interest and seed (optional). Default seed value is 1
 * The instance data that is generated complies with the schema defined in the TBox of the selected profile.
 * The size of the instance data depends on the number of universities. 
 * The axioms generated from the code are the assertion axioms (class, object property and data property). 
 * First of all, the instances (class assertion axioms) for the University class are generated (in the Generator.java) and their number is equal to the number of universities specified by the user. 
 * Then for each University class instance, instances for College, and Publication are generated. 
 * For each College, Department instances are generated. 
 * For each Department, instances of Man, Woman, Program, and Course are generated. 
 * The number of instances that are generated for each class is selected automatically and randomly from the range specified in the configuration file. 
 * Property assertion axioms are created using these instances. 
 * For example, an object property isDepartmentOf links a Department instance to a College instance. 
 * Similarly, a data property hasName is used to connect a department name to a Department instance. 
 * The number of instances of each class (other than University) and the number of connections between all the instances are again selected automatically and randomly from the range specified in the configuration file. 
 * In order to change the size of the generated ABox as well as to control the density (number of connections between different instances), the range (maximum and minimum values of the parameters) can be modified in the configuration file. Moreover, the output ontology format can also be specified in the configuration file. By default, the generated ontology format is RDF/XML.
 * 
 */

package ABoxGen.InstanceGenerator;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Properties;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.semanticweb.owlapi.util.DefaultPrefixManager;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.formats.*;
import org.semanticweb.owlapi.model.OWLDocumentFormat;

public class Generator {
    String ontologyFormat;
    int publicationNum_Min; //per university
    int publicationNum_Max; //per university
    int researchGroupNum_Min;
    int researchGroupNum_Max;
    int collegeNum_Min;//=5;
    int collegeNum_Max;//=10;
    double ratio_womenCollege;//=0.2;
    int womenCollegeNum_Min;//=(int)(collegeNum_Min*ratio_womenCollege);
    int womenCollegeNum_Max;//=(int)(collegeNum_Max*ratio_womenCollege);
    int deptNum_Min;
    int deptNum_Max;
    int RANum_Min;
    int RANum_Max;
    int progNum_Min;
    int progNum_Max;
    int ugStudentNum_Min;
    int ugStudentNum_Max;
    int pgStudentNum_Min;
    int pgStudentNum_Max;
    int phdStudentNum_Min;
    int phdStudentNum_Max;
    int ugCourseNum_Min;
    int ugCourseNum_Max;
    int electiveCourseNum_Min;
    int electiveCourseNum_Max;
    int assistantProfessorNum_Min;
    int assistantProfessorNum_Max;
    int associateProfessorNum_Min;
    int associateProfessorNum_Max;
    int fullProfessorNum_Min;
    int fullProfessorNum_Max;
    int visitingProfessorNum_Min;
    int visitingProfessorNum_Max;
    int lecturerNum_Min;
    int lecturerNum_Max;
    int postDocNum_Min;
    int postDocNum_Max;
    int systemStaffNum_Min;
    int systemStaffNum_Max;
    int clericalStaffNum_Min;
    int clericalStaffNum_Max;
    int otherStaffNum_Min;
    int otherStaffNum_Max;
    int internalAdvisorNum_Min;
    int internalAdvisorNum_Max;
    int externalAdvisorNum_Min;
    int externalAdvisorNum_Max;
    int numOfElectives_Min;
    int numOfElectives_Max;
    int numOfElectivesOutsideDept_Min;
    int sameHomeTownNum_Min;
    int sameHomeTownNum_Max;
    int knowsNum_Min;
    int knowsNum_Max;
    int likesNum_Min;
    int likesNum_Max;
    int lovesNum_Min;
    int lovesNum_Max;
    int isCrazyAboutNum_Min;
    int isCrazyAboutNum_Max;
    int dislikesNum_Min;
    int dislikesNum_Max;
    String[] TOKEN_CollegeDiscipline= new String[]{"Engineering", "FineArts", "HumanitiesAndSocial","Management", "Science"};
    String[] TOKEN_Engineering = new String[]{"AeronauticalEngineering","BiomedicalEngineering","ChemicalEngineering","CivilEngineering","ComputerEngineering","ElectricalEngineering","IndustryEngineering","MaterialScienceEngineering","MechanicalEngineering","PetroleumEngineering"};
    String[] TOKEN_Management = new String[]{"DesignManagement", "FinancialAndAccountingManagement", "HumanResourceManagement", "MarketingManagement", "OperationsManagement", "ProjectManagement", "PublicRelationsManagement", "SalesManagement", "SupplyChainManagement", "RiskManagement"};
    String[] TOKEN_FineArts= new String[]{"Architecture", "AsianArts", "Drama", "LatinArts", "MediaArtsAndSciences", "MedievalArts", "ModernArts","MusicsClass", "PerformingArts", "TheatreAndDance"};
    String[] TOKEN_Science=new String[]{"Astronomy", "Biology", "Chemistry", "ComputerScience", "GeoScience", "MarineScience", "MaterialScience", "Mathematics", "Physics", "Statistics"};
    String[] TOKEN_HumanitiesAndSocial=new String[]{"Anthropology", "Economics", "English", "History", "Humanities", "Linguistics", "ModernLanguages", "Philosophy", "Psychology", "Religions"};
 
   
    OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
    PrefixManager pm = new DefaultPrefixManager("https://kracr.iiitd.edu.in/OWL2Bench");
    IRI ontologyIRI = IRI.create(pm.getDefaultPrefix());
    OWLOntology ontology = createOWLOntology(pm);
    File file2;
    OWLOntology o;
    OWLDataFactory factory = manager.getOWLDataFactory();
    OWLOntology ontology1;
    int univNum,publicationNum;
    String profile;
    University[] universities;
    Publication[] publications;
    InterlinkedProperties interlinks;
    AssignAdvisor assignAdvisor;
    AssignDegree assignDegree;
    
    
    HashSet<String> universityName = new HashSet();
    HashMap<Integer,String> map1 = new HashMap<>();
    HashMap<Integer,String> map2 = new HashMap<>();
    HashMap<Integer,String> map3 = new HashMap<>();

    public Generator() {
    }

    public static void main(String[] args) {
    	//input 
        int univNum=1;
        int seed=1;	      
        String profile="EL";  
        
        if(args.length==3)
        {
            univNum=Integer.parseInt(args[0]);
            profile= args[1];
            seed=Integer.parseInt(args[2]);
        }
        else if(args.length==2)
        {
            univNum=Integer.parseInt(args[0]);
            profile= args[1];
            System.out.println("Default Seed value is 1");
        }
        else
        {
     
                System.out.println("Please give arguments in the following order: No. of Universities (int), OWL 2 Profile (EL/QL/RL/DL), Seed (optional) ");
                System.out.println("For example: 1 DL 1 or 1 DL (where default seed value is 1");
        }
        //System.out.println(profile);
        new Generator().start(univNum, seed, profile);
    }

//TBox
    
    public void start(int univNum, int seed, String profile) {
    	//System.out.println(profile);
    	this.profile=profile;
    	//System.out.println(".." + profile);
    	//use TBox corresponding to the user input
    	 if(profile.matches("EL")){
    		 System.out.println("Loading TBox UNIV-BENCH-OWL2EL.owl");
    		 file2 = new File("UNIV-BENCH-OWL2EL.owl");
    	 }
    	 else if (profile.matches("QL")) {

    		 System.out.println("Loading TBox UNIV-BENCH-OWL2QL.owl");
    		 file2 = new File("UNIV-BENCH-OWL2QL.owl");
    	 }
    	 else if (profile.matches("RL")) {

    		 System.out.println("Loading TBox UNIV-BENCH-OWL2RL.owl");
    		 file2 = new File("UNIV-BENCH-OWL2RL.owl");
    	 }
    	 else if (profile.matches("DL"))
    	 {
    		 System.out.println("Loading TBox UNIV-BENCH-OWL2DL.owl");
    		 file2 = new File("UNIV-BENCH-OWL2DL.owl");
    	 }
    	OWLOntology o = loadOWLOntology(file2);
        OWLDocumentFormat format = manager.getOntologyFormat(o);

        this.univNum = univNum;
        GetRandomNo.setSeed((long) seed);

        Properties prop = new Properties();
        InputStream input = null;

        try {
            input = new FileInputStream("config.properties");
            // load range of different parameters from config.properties file
            prop.load(input);
        
            this.ontologyFormat=prop.getProperty("ontologyFormat");
            this.publicationNum_Min=Integer.parseInt(prop.getProperty("publicationNum_Min"));
            this.publicationNum_Max=Integer.parseInt(prop.getProperty("publicationNum_Max"));
            this.researchGroupNum_Min=Integer.parseInt(prop.getProperty("researchGroupNum_Min"));
            this.researchGroupNum_Max=Integer.parseInt(prop.getProperty("researchGroupNum_Max"));
            this.collegeNum_Min=Integer.parseInt(prop.getProperty("collegeNum_Min"));
            this.collegeNum_Max=Integer.parseInt(prop.getProperty("collegeNum_Max"));
            this.ratio_womenCollege=Double.parseDouble(prop.getProperty("ratio_womenCollege"));
            this.womenCollegeNum_Min=(int)(this.collegeNum_Min*this.ratio_womenCollege);
            this.womenCollegeNum_Max=(int)(this.collegeNum_Max*this.ratio_womenCollege);
            this.RANum_Min=Integer.parseInt(prop.getProperty("RANum_Min"));
            this.RANum_Max=Integer.parseInt(prop.getProperty("RANum_Max"));
            this.sameHomeTownNum_Min=Integer.parseInt(prop.getProperty("sameHomeTownNum_Min"));
            this.sameHomeTownNum_Max=Integer.parseInt(prop.getProperty("sameHomeTownNum_Max"));
            this.knowsNum_Min=Integer.parseInt(prop.getProperty("knowsNum_Min"));
            this.knowsNum_Max=Integer.parseInt(prop.getProperty("knowsNum_Max"));
            this.isCrazyAboutNum_Min=Integer.parseInt(prop.getProperty("isCrazyAboutNum_Min"));
            this.isCrazyAboutNum_Max=Integer.parseInt(prop.getProperty("isCrazyAboutNum_Max"));
            this.lovesNum_Min=Integer.parseInt(prop.getProperty("lovesNum_Min"));
            this.lovesNum_Max=Integer.parseInt(prop.getProperty("lovesNum_Max"));
            this.likesNum_Min=Integer.parseInt(prop.getProperty("likesNum_Min"));
            this.likesNum_Max=Integer.parseInt(prop.getProperty("likesNum_Max"));
            this.dislikesNum_Min=Integer.parseInt(prop.getProperty("dislikesNum_Min"));
            this.dislikesNum_Max=Integer.parseInt(prop.getProperty("dislikesNum_Max"));
            this.deptNum_Min=Integer.parseInt(prop.getProperty("deptNum_Min"));
            this.deptNum_Max=Integer.parseInt(prop.getProperty("deptNum_Max"));
            this.numOfElectives_Min=Integer.parseInt(prop.getProperty("numOfElectives_Min"));
            this.numOfElectives_Max=Integer.parseInt(prop.getProperty("numOfElectives_Max"));
            this.numOfElectivesOutsideDept_Min=Integer.parseInt(prop.getProperty("numOfElectivesOutsideDept_Min"));
            this.internalAdvisorNum_Min=Integer.parseInt(prop.getProperty("internalAdvisorNum_Min"));
            this.internalAdvisorNum_Max=Integer.parseInt(prop.getProperty("internalAdvisorNum_Max"));
            this.externalAdvisorNum_Min=Integer.parseInt(prop.getProperty("externalAdvisorNum_Min"));
            this.externalAdvisorNum_Max=Integer.parseInt(prop.getProperty("externalAdvisorNum_Max"));
            this.ugStudentNum_Min=Integer.parseInt(prop.getProperty("ugStudentNum_Min"));
            this.ugStudentNum_Max=Integer.parseInt(prop.getProperty("ugStudentNum_Max"));
            this.pgStudentNum_Min=Integer.parseInt(prop.getProperty("pgStudentNum_Min"));
            this.pgStudentNum_Max=Integer.parseInt(prop.getProperty("pgStudentNum_Max"));
            this.phdStudentNum_Min=Integer.parseInt(prop.getProperty("phdStudentNum_Min"));
            this.phdStudentNum_Max=Integer.parseInt(prop.getProperty("phdStudentNum_Max"));
            this.assistantProfessorNum_Min=Integer.parseInt(prop.getProperty("assistantProfessorNum_Min"));
            this.assistantProfessorNum_Max=Integer.parseInt(prop.getProperty("assistantProfessorNum_Max"));
            this.associateProfessorNum_Min=Integer.parseInt(prop.getProperty("associateProfessorNum_Min"));
            this.associateProfessorNum_Max=Integer.parseInt(prop.getProperty("associateProfessorNum_Max"));
            this.fullProfessorNum_Min=Integer.parseInt(prop.getProperty("fullProfessorNum_Min"));
            this.fullProfessorNum_Max=Integer.parseInt(prop.getProperty("fullProfessorNum_Max"));
            this.visitingProfessorNum_Min=Integer.parseInt(prop.getProperty("visitingProfessorNum_Min"));
            this.visitingProfessorNum_Max=Integer.parseInt(prop.getProperty("visitingProfessorNum_Max"));
            this.lecturerNum_Min=Integer.parseInt(prop.getProperty("lecturerNum_Min"));
            this.lecturerNum_Max=Integer.parseInt(prop.getProperty("lecturerNum_Max"));
            this.postDocNum_Min=Integer.parseInt(prop.getProperty("postDocNum_Min"));
            this.postDocNum_Max=Integer.parseInt(prop.getProperty("postDocNum_Max"));
            this.systemStaffNum_Min=Integer.parseInt(prop.getProperty("systemStaffNum_Min"));
            this.systemStaffNum_Max=Integer.parseInt(prop.getProperty("systemStaffNum_Max"));
            this.clericalStaffNum_Min=Integer.parseInt(prop.getProperty("clericalStaffNum_Min"));
            this.clericalStaffNum_Max=Integer.parseInt(prop.getProperty("clericalStaffNum_Max"));
            this.otherStaffNum_Min=Integer.parseInt(prop.getProperty("otherStaffNum_Min"));
            this.otherStaffNum_Max=Integer.parseInt(prop.getProperty("otherStaffNum_Max"));
            this.progNum_Min=Integer.parseInt(prop.getProperty("progNum_Min"));
            this.progNum_Max=Integer.parseInt(prop.getProperty("progNum_Max"));
    } catch (IOException ex) {
        ex.printStackTrace();
    } finally {
        if (input != null) {
            try {
                input.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
        this.generate();
    }

    private void generate() {

        try {
        	
        	
        	FileInputStream fileInputStream =new FileInputStream("RandomNames.xlsx"); 
        	// the excel file is used to give real like names to Person and University instances
            XSSFWorkbook workbook = new XSSFWorkbook(fileInputStream);
            Sheet sheet1 = workbook.getSheetAt(0);
            Sheet sheet2 = workbook.getSheetAt(1);
            Sheet sheet3 = workbook.getSheetAt(2);
            DataFormatter dataFormatter1 = new DataFormatter();
            DataFormatter dataFormatter2 = new DataFormatter();
            DataFormatter dataFormatter3 = new DataFormatter();
            int i=0;
            for (Row row: sheet1) {
                    for (Cell cell : row) {
                        String cellValue = dataFormatter1.formatCellValue(cell);
                        map1.put(i++,cellValue);
                    }
                }
            i=0;
            for (Row row: sheet2) {
                for (Cell cell : row) {
                    String cellValue = dataFormatter2.formatCellValue(cell);
                    map2.put(i++,cellValue);
                }
            }
            i=0;
            for (Row row: sheet3) {
                for (Cell cell : row) {
                    String cellValue = dataFormatter3.formatCellValue(cell);
                    map3.put(i++,cellValue);
                }
            }
        } catch (
                FileNotFoundException e) {
            e.printStackTrace();
        } catch (
                IOException e) {
            e.printStackTrace();
        }

        this.universities = new University[this.univNum];

        // Generates university instances 
        for (int i = 0; i < this.univNum; ++i) {
            this.universities[i] = new University(this, i);
         
        }
        //Generate publications
        //create links across universities using Publication 'hasAuthor' some Person. 1 publication can have authors from different universities
        //also authors of 1 publication are interlinked using 'hasCollaboration' Property.
        this.publicationNum=GetRandomNo.getRandomFromRange(publicationNum_Min*univNum,publicationNum_Max*univNum);
        this.publications= new Publication[this.publicationNum];
        
        //generates publications for each university
        for (int i = 0; i < this.publicationNum; ++i) {
            this.publications[i] = new Publication(this,universities,i);
        }

        //links across different universities using sameHomeTownWith, likes, loves, isCrazyAbout, dislikes, hasCollaborationWith
        this.interlinks=new InterlinkedProperties(this,universities);
        
        //assign internal and external professors as advisor
        //more interlinks
        this.assignAdvisor=new AssignAdvisor(this,universities);
        
        // hasUnderGraduateDegreeFrom,hasMastersDegreeFrom,hasDoctoralDegreeFrom
        this.assignDegree=new AssignDegree(this,universities);
        
   
        OWLXMLDocumentFormat owx = new OWLXMLDocumentFormat();
        TurtleDocumentFormat ttl=new TurtleDocumentFormat();
        //RDfXMLSyntaxDocumentFormat rdf= new  RDfXMLDocumentFormat();
        FunctionalSyntaxDocumentFormat ofn = new FunctionalSyntaxDocumentFormat();
        ManchesterSyntaxDocumentFormat omn = new ManchesterSyntaxDocumentFormat();
        
        
       
       
        try  {
            File file = new File(System.getProperty("user.dir")+ "/" + "OWL2"+this.profile + "-" + univNum + ".owl");
try {
            if (!file.exists()) {
                
            	file.createNewFile();
            } }catch (IOException e) {
   		System.out.println("Exception Occurred:");
	        e.printStackTrace();
	  }
			
            
            System.out.println("Total Axiom Count="+ o.getAxiomCount());
            System.out.println("Total Logical Axiom Count="+ o.getLogicalAxiomCount());
            if(this.ontologyFormat.matches("owx")) {
            	manager.saveOntology(o,owx,IRI.create(file.toURI()));
            	System.out.println("Saved Ontology Format is OWL/XML");
            }
            else if(this.ontologyFormat.matches("ttl")) {
            	manager.saveOntology(o,ttl,IRI.create(file.toURI()));
            	System.out.println("Saved Ontology Format is Turtle");
            }
            else if(this.ontologyFormat.matches("ofn")) {
            	manager.saveOntology(o,ofn,IRI.create(file.toURI()));
            	System.out.println("Saved Ontology Format is OWL Functional");
            }
            else if(this.ontologyFormat.matches("omn")) {
            	manager.saveOntology(o,omn,IRI.create(file.toURI()));
            	System.out.println("Saved Ontology Format is Manchester");
            }
            else {
            OWLDocumentFormat format = manager.getOntologyFormat(o);
            manager.saveOntology(o,format,IRI.create(file.toURI()));
            System.out.println("Saved Ontology Format is RDF/XML");
            }
            //OWLDocumentFormat format = manager.getOntologyFormat(o);
            //System.out.println("Ontology Format="+ format);
            System.out.println("Finished Writing to file "+ System.getProperty("user.dir")+ "/" + "OWL2"+this.profile + "-" + univNum + ".owl" );
        } catch (OWLOntologyStorageException e) {
            e.printStackTrace();
        }
        
    }

    public OWLOntology createOWLOntology(PrefixManager pm) {
        if (pm.getDefaultPrefix() == null) {
            throw new IllegalStateException("Default ontology prefix must not be null.");
        }
        try  {
            ontology1= manager.createOntology(IRI.create(pm.getDefaultPrefix()));
            // use the inputStream to read a file
        } catch (OWLOntologyCreationException e) {
            e.printStackTrace();
        }
        // Cast to a mutable ontology to pass OWLApi's strange checks
        return ontology1;
    }

    public OWLOntology loadOWLOntology(File file2)
    {
        try{
            o = manager.loadOntologyFromOntologyDocument(file2);
        }catch (OWLOntologyCreationException e)
        {
            e.printStackTrace();
        }

        return o;

    }
    public OWLIndividual getNamedIndividual(String name) {

        OWLIndividual individual = factory.getOWLNamedIndividual(IRI.create(ontologyIRI + "#" + name));
        return individual;
    }

    public OWLObjectProperty getObjectProperty(String name) {

        OWLObjectProperty property = factory.getOWLObjectProperty(IRI.create(ontologyIRI + "#" + name));
        return property;

    }

    public OWLDataProperty getDataProperty(String name) {

        OWLDataProperty property = factory.getOWLDataProperty(IRI.create(ontologyIRI + "#" + name));
        return property;

    }

    public OWLClass getClass(String name) {

        OWLClass classname = factory.getOWLClass(IRI.create(ontologyIRI + "#" + name));
        return classname;

    }

    public OWLLiteral getLiteral(String name) {

        OWLLiteral literal = factory.getOWLLiteral(name);
        return literal;

    }

    public void addAxiomToOntology(OWLAxiom axiom) {

       o.getOWLOntologyManager().addAxiom(o, axiom);
       //we keep appending all the assertion axioms to TBox file.
    }

    public void classAssertion(OWLClassExpression classExpression, OWLIndividual individual) {

        addAxiomToOntology(factory.getOWLClassAssertionAxiom(classExpression, individual));
    }

    public void dataPropertyAssertion(OWLDataProperty property, OWLIndividual subject, OWLLiteral object) {
        addAxiomToOntology(factory.getOWLDataPropertyAssertionAxiom(property,subject,  object));
    }

    public void objectPropertyAssertion(OWLObjectProperty property, OWLIndividual subject, OWLIndividual object) {
        addAxiomToOntology(factory.getOWLObjectPropertyAssertionAxiom( property, subject,  object));
    }

}



